// Generated by Dagger (https://google.github.io/dagger).
package com.jetpackcompose.hotel.di;

import com.jetpackcompose.core.di.CoreComponent;
import com.jetpackcompose.hotel.ui.HotelFragment;
import com.jetpackcompose.hotel.ui.HotelFragment_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerHotelComponent implements HotelComponent {
  private final CoreComponent coreComponent;

  private DaggerHotelComponent(CoreComponent coreComponentParam) {
    this.coreComponent = coreComponentParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public void inject(HotelFragment fragment) {
    injectHotelFragment(fragment);
  }

  private HotelFragment injectHotelFragment(HotelFragment instance) {
    HotelFragment_MembersInjector.injectService(
        instance,
        Preconditions.checkNotNull(
            coreComponent.provideHotelService(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private CoreComponent coreComponent;

    private Builder() {}

    public Builder coreComponent(CoreComponent coreComponent) {
      this.coreComponent = Preconditions.checkNotNull(coreComponent);
      return this;
    }

    public HotelComponent build() {
      Preconditions.checkBuilderRequirement(coreComponent, CoreComponent.class);
      return new DaggerHotelComponent(coreComponent);
    }
  }
}
